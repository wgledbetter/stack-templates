{-# START_FILE stack.yaml #-}
resolver: lts-22.7

packages:
  - .
  - bench
  - test
  - scratch

install-ghc: true

nix:
  enable: true
  packages: [zlib.dev, zlib.out]

{-# START_FILE package.yaml #-}
name: {{name}}

dependencies:
  - base >= 4.17 && < 5

ghc-options:
  - -W
  - -Werror

library:
  source-dirs: src

{-# START_FILE default.nix #-}
(import
  (
    let
      lock = builtins.fromJSON (builtins.readFile ./flake.lock);
      nodeName = lock.nodes.root.inputs.flake-compat;
    in
    fetchTarball {
      url = lock.nodes.${nodeName}.locked.url or "https://github.com/edolstra/flake-compat/archive/${lock.nodes.${nodeName}.locked.rev}.tar.gz";
      sha256 = lock.nodes.${nodeName}.locked.narHash;
    }
  )
  { src = ./.; }
).defaultNix

{-# START_FILE flake.nix #-}
{
  description = "my project description";
  inputs.nixpkgs.url = "github:NixOS/nixpkgs/master";
  inputs.flake-utils.url = "github:numtide/flake-utils";
  inputs.flake-compat.url = "https://flakehub.com/f/edolstra/flake-compat/1.tar.gz";

  # When building myApp through pkgs.haskell.lib.buildStackProject (down below)
  # Stack should download Haskell packages directly from Stackage and bypass Nix,
  # so force Nix to allow this "non-sandboxed" build. See https://zimbatm.com/notes/nix-packaging-the-heretic-way
  nixConfig.sandbox = "relaxed";

  outputs = { self, nixpkgs, flake-utils, ... }:
    flake-utils.lib.eachDefaultSystem (system:
      let
        pkgs = nixpkgs.legacyPackages.${system};

        # Nix GHC version needs to be the one that the stack.yaml resolver expects.
        #
        # Find out available Nix GHCs:
        # ```
        # $ nix repl
        # nix-repl> :lf nixpkgs
        # nix-repl> legacyPackages.x86_64-linux.haskell.packages.<TAB>
        # ```
        # `:lf` stands for "load flake"
        #
        # Find out expected Stack GHCs:
        # Visit https://www.stackage.org/ and look for LTS or Nightlies, e.g.
        # resolver: lts-20.11          expects ghc-9.2.5
        # resolver: nightly-2023-02-14 expects ghc-9.4.4
        #
        # So if you use "ghc944", set "resolver: nightly-2023-02-14" in your stack.yaml file
        hPkgs = pkgs.haskell.packages."ghc965"; # Nix GHC version 9.6.5

        myLibDeps = [
          pkgs.zlib # External C compression library needed by some Haskell packages
        ];

        myLocalDevTools = [
          hPkgs.ghc # GHC compiler in the version above; verify with `ghc --version`
          stack-wrapped
          #hPkgs.ghcid  # Continous terminal Haskell compile checker
          #hPkgs.ormolu # Haskell formatter
          hPkgs.hlint # Haskell codestyle checker
          hPkgs.hoogle # Lookup Haskell documentation
          hPkgs.haskell-language-server # LSP server for editor
          hPkgs.implicit-hie # auto generate LSP hie.yaml file from cabal
          hPkgs.retrie # Haskell refactoring tool
          # hPkgs.cabal-install
        ];

        # Wrap Stack to work with our custom Nix integration. We don't modify stack.yaml so it keeps working for non-Nix users.
        # --no-nix         # Don't use Stack's built-in Nix integrating.
        # --system-ghc     # Use the existing GHC on PATH (will be provided through this Nix file)
        # --no-install-ghc # Don't try to install GHC if no matching GHC version found on PATH
        stack-wrapped = pkgs.symlinkJoin {
          name = "stack"; # will be available as the usual `stack` in terminal
          paths = [ pkgs.stack ];
          buildInputs = [ pkgs.makeWrapper ];
          postBuild = ''
            wrapProgram $out/bin/stack \
              --add-flags "\
                --no-nix \
                --system-ghc \
                --no-install-ghc \
                --system-ghc \
              "
          '';
        };

        myApp = pkgs.haskell.lib.buildStackProject {
          name = "myStack";
          src = ./.;
          ghc = hPkgs.ghc;
          buildInputs = myLibDeps;
        };

      in {
        devShells.default = pkgs.mkShell {
          buildInputs = myLocalDevTools;

          # Make external Nix C libraries like zlib known to GHC, like pkgs.haskell.lib.buildStackProject does
          # https://github.com/NixOS/nixpkgs/blob/d64780ea0e22b5f61cd6012a456869c702a72f20/pkgs/development/haskell-modules/generic-stack-builder.nix#L38
          LD_LIBRARY_PATH = pkgs.lib.makeLibraryPath myLibDeps;
        };
        packages.default = myApp;
      });
}

{-# START_FILE src/Lib.hs #-}
module Lib where

fun :: (Num a) => a -> a -> a
fun = (+)

{-# START_FILE bench/package.yaml #-}
name: bench

dependencies:
  - {{name}}
  - base
  - criterion

ghc-options:
  - -rtsopts
  - -threaded
  - -O2
  - -fforce-recomp
  - -W
  - -Werror

executables:
  bench:
    main: Bench.hs

{-# START_FILE bench/Bench.hs #-}
import Criterion.Main

-- Dummy -----------------------------------------------------------------------

dummy = bench "addition" $ whnf (+2) 2

-- Main ------------------------------------------------------------------------

main = defaultMain [dummy]

{-# START_FILE test/package.yaml #-}
name: tests

dependencies:
  - {{name}}
  - base
  - tasty
  - tasty-hunit
  - tasty-quickcheck

ghc-options:
  - -rtsopts
  - -threaded
  - -O2
  - -fforce-recomp
  - -W
  - -Werror

executables:
  tests:
    main: Test.hs

tests:
  test-main:
    main: Test.hs

{-# START_FILE test/Test.hs #-}
import Test.Tasty
import Test.Tasty.HUnit

-- Dummy -----------------------------------------------------------------------

dummy :: TestTree
dummy = testCase "dummy" $ assertEqual "two plus two equals four" (2 + 2) 4

-- Main ------------------------------------------------------------------------

main = defaultMain dummy

{-# START_FILE scratch/package.yaml #-}
name: scratch

ghc-options:
  - -W
  - -Werror

dependencies:
  - {{name}}
  - base

executables:
  ex00:
    main: Ex00_Empty.hs

{-# START_FILE scratch/Ex00_Empty.hs #-}
module Main where

main :: IO ()
main = putStrLn "empty"

{-# START_FILE .gitignore #-}
# Created by https://www.toptal.com/developers/gitignore/api/haskell
# Edit at https://www.toptal.com/developers/gitignore?templates=haskell

### Haskell ###
dist
dist-*
cabal-dev
*.o
*.hi
*.hie
*.chi
*.chs.h
*.dyn_o
*.dyn_hi
.hpc
.hsenv
.cabal-sandbox/
cabal.sandbox.config
*.prof
*.aux
*.hp
*.eventlog
.stack-work/
cabal.project.local
cabal.project.local~
.HTF/
.ghc.environment.*

# End of https://www.toptal.com/developers/gitignore/api/haskell

{-# START_FILE README.md #-}
# {{name}}

This project was bootstrapped with the wgl template.
